option solver "/home/marika/software/AMPL/cplex";	# path to used solver (cplex)
option cplex_options 'mipdisplay 2 mipinterval 1';	# what should be displayed during solution processFlow
option eexit -99999; 					# supress bailing after xxx warnings

#set FILENAMES := {"empty-16-16.map"};# , "random-32-32-20.map"};#, "random-64-64-20.map", "room-32-32-4.map", "warehouse-10-20-10-2-1.map"};
set FILENAMES := {"random-32-32-20.map"};#, "room-32-32-4.map", "warehouse-10-20-10-2-1.map"};

#set FILENAMES := {"test.map"};
set INSTANCES{FILENAMES};
#let INSTANCES["test.map"] := {"test.scen"};
#let INSTANCES["empty-16-16.map"] := {"empty-16-16-random-1.scen","empty-16-16-random-2.scen","empty-16-16-random-3.scen","empty-16-16-random-4.scen","empty-16-16-random-5.scen"};

let INSTANCES["random-32-32-20.map"] := {"random-32-32-20-random-4.scen"};#,"random-32-32-20-random-4.scen","random-32-32-20-random-5.scen"};

#let INSTANCES["random-64-64-20.map"] := {"random-64-64-20-random-1.scen","random-64-64-20-random-2.scen","random-64-64-20-random-3.scen","random-64-64-20-random-4.scen","random-64-64-20-random-5.scen"};
#
#let INSTANCES["room-32-32-4.map"] := {"room-32-32-4-random-1.scen","room-32-32-4-random-2.scen","room-32-32-4-random-3.scen","room-32-32-4-random-4.scen","room-32-32-4-random-5.scen"};
#
#let INSTANCES["warehouse-10-20-10-2-1.map"] := {"warehouse-10-20-10-2-1-random-1.scen","warehouse-10-20-10-2-1-random-2.scen","warehouse-10-20-10-2-1-random-3.scen","warehouse-10-20-10-2-1-random-4.scen","warehouse-10-20-10-2-1-random-5.scen"};

param height;
param width;
param map{0..height-1, 0..width-1} integer;
param maxAgentsInInstance;
param allagents{0..maxAgentsInInstance-1};
param allgoals{0..maxAgentsInInstance-1};
param sx;
param sy;
param gx;
param gy;
param tlim default 600;		# time limit for the solver
param iterCnt default 0;	# number of iteration in matching ub algorithm
param currTlim default 600;	# cummulate _solve_elapsed_time for each iteration of decision model
param objlog symbolic := "./logs/objlog.txt";	# objective function value log file
param timelog symbolic := "./logs/timelog.txt"; # _solve_elapsed_time log file
param starttime default 0;
param stoptime default 0;
param expobj default 0;

model "models/CMAPF-mcf-simple-sparse.mod";
set KS := {10};
#set Reachable {0..k-1, 0..ubLimit} within V;   
#set ReachableR {0..k-1, 0..ubLimit} within V; 
#set ReachV {0..k-1, 0..ubLimit} within V;   
#set ReachE {0..k-1, 0..ubLimit} within Arcs;


printf 's\t',ctime() >> (objlog);
printf 's\t',ctime() >> (timelog);

for {fname in FILENAMES} {
	reset data V,E,Agents, Teams, Goals, map;
	read height< (fname);
	read width < (fname);
	let V := {};
	for {i in 0..height-1} {
		for {j in 0..width-1} {
			read map[i,j] < (fname);
			if map[i,j] > 0 then let map[i,j] := -1; # if there is an obstacle, put -1
			if map[i,j] = 0 then {
				let map[i,j] := card(V);         # if there is a node set to the node ID
				let V := V union {card(V)};      # insert new node to V
			}
		}
	
	display height;
	display width;
	display map;
	let E := {};
	for {i in 0..height-1} {
		for {j in 0..width-1} {
			if map[i,j] >= 0  then { # if there is a node
				if j < width - 1 then {			# if there is an adjacent node
					if map[i,j+1] >= 0 then {
						let E := E union {(map[i,j],map[i,j+1])};		
					}
				}
				if i < height - 1 then {
					if map[i+1,j] >= 0  then { 	# if there is an adjacent node
						let E := E union {(map[i,j],map[i+1,j])};		
					}
				}
			}
		}
	}
	let cardV := card(V);
	let cardE := card(E);

	for {instname in INSTANCES[fname]} {
		read maxAgentsInInstance < (instname);
		reset data allagents;
		for {i in 0..maxAgentsInInstance-1 }{ 			# store all agents and goals that possibly will be in this instance
				read sx, sy, gx, gy < (instname);
				let allagents[i] := map[sy,sx];
				let allgoals[i] := map[gy,gx];
				printf "Adding agent: %d at %d %d\n",map[sy,sx], sy, sx;
				printf "Adding goal: %d at %d %d\n",map[gy,gx], gy,gx;
		}
		for {teamCount in KS} {
			let k := teamCount;
			reset data Teams;
			reset data Goals;

			for {j in 0..k-1} {				# initially put one agent into each team
				let Teams[j] := {};
				let Goals[j] := {};
			}
			for {agentCount in 0..maxAgentsInInstance-1 by k} {
				let starttime := time(); 
				let currTlim := tlim;
				printf '###################################################################\n';
				printf '                       model: max informed\n';
				printf '####################################################################\n';
				for {i in 0..k-1} {
					let Teams[i] := Teams[i] union {allagents[agentCount + i]};
					let Goals[i] := Goals[i] union {allgoals[agentCount + i]};
					
				}
				display Teams;
				display Goals;
				let expobj := card(union{c in 0..k-1}Teams[c]); 
                                let ReachE[0,0] := {};
                                for {i in 0..k-1} {
                                        let Reachable[i,0] := Teams[i];                               
                                        let ReachableR[i,0] := Goals[i];
                                        let ReachV[i,0] := {};                                        
                                        for {j in 1..ubLimit} {                                       
                                                let Reachable[i,j] := {};                             
                                                let ReachableR[i,j] := {}; 
                                                let ReachV[i,j] := {};                                
                                                let ReachE[i,j] := {};
                                        }
                                }

				for {i in lb..ubLimit} {						# iterate from lower to upper bound
				        let ub := i;
					printf "Current iteration: %d\nTime limit: %d\n",i,currTlim;
					
                                        for {ii in 0..k-1} {
                                                let Reachable[ii,ub] := Reachable[ii,ub-1];
                                                let ReachableR[ii,ub] := ReachableR[ii,ub-1];
                                                #if ub > 1 then let ReachE[ii,ub] := ReachE[ii,ub-1];
                                                for {u in Reachable[ii,ub-1]} {
                                                        let Reachable[ii,ub]:= Reachable[ii,ub] union N[u];
                                                #       let ReachE[ii,ub]:= ReachE[ii,ub] union {union{v in N[u]} {(u,v)}};
                                                }
                                                for {u in ReachableR[ii,ub-1]} {
                                                        let ReachableR[ii,ub]:= ReachableR[ii,ub] union N[u];
                                                }
                                        }
                                        for {ii in 0..k-1} { # construct ReachV
                                                for {jj in 0..ub} {
                                                        let ReachV[ii,jj] := Reachable[ii,jj] intersect ReachableR[ii,ub-jj];
                                                }
                                        }

                                        for {ii in 0..k-1} {
                                                for {jj in 1..ub} { # construct ReachE
                                                        for {u in ReachV[ii,jj-1]} {
                                                                for {v in ReachV[ii,jj]} {
                                                                        if (u,v) in Arcs then {
                                                                                let ReachE[ii,jj] := ReachE[ii,jj] union { (u,v) };
                                                                        }
                                                                }
                                                        }
                                                }
                                        }
                                        if card(union{c in 0..k-1} ReachV[c,ub]) < expobj) then { # if no proper intersection empty both ReachV and ReachE
                                                printf "empty intersection, time limit %d is insufficient.",ub;
                                                for {ii in 0..k-1} {
                                                        for {jj in 0..ub} {
                                                                let ReachV[ii,jj] := {};
                                                                let ReachE[ii,jj] := {};
                                                        }
                                                }
                                                continue;
                                        }
#					option cplex_options ('timelimit ' & currTlim);			# set time limit for the following solve command
					option cplex_options ('lowercutoff ' & expobj - 1);			# set lower cutoff to expected objective value
					option cplex_options $cplex_options 'absmipgap 0.9999999 ';
					#option cplex_options 'mipdisplay 2 mipinterval 1';	# what should be displayed during solution processFlow
					printf "------------------------- SOLVING :";
					display ub;
				        solve;
					printf "------------------------- DONE:     ";
					
					let currTlim := currTlim - _solve_elapsed_time;
					
				        if solve_result = 'solved' then { 	# a solution is found
						# if a solution is found, but objective is not n-s, then the solution is in fact infeasible!
						if round(maxFlow,2) = expobj then {
							let stoptime := time();
							printf ' %s\t%d\t %d, %4.2f\t%4.2f\n',instname, teamCount, expobj, stoptime-starttime, 600-currTlim  >> (timelog);
							printf ' %s\t%d\t %d, %2.0f\n', instname, teamCount, expobj, ub >> (objlog);

				        	        printf 'optimal solution found, k goals captured. Makespan: %d\n',i;
				        	        break;
						}
				        }
					if solve_result = 'infeasible' then {	# the instance has no feasible solution
						if i = ubLimit-1 then {		# if we are in the last iteration before the upper bound, the solution is indeed the ub.
							let stoptime := time();
							printf 'K: %d, Agents: %d, %4.2f\t', teamCount, expobj, stoptime-starttime  >> (timelog);
							printf 'K: %d, Agents: %d, %2.0f\t', teamCount, expobj, ub >> (objlog);
							printf 'infeasible solution for iteration %d, but upper bound %d can now be used',i,ub;
				                	break;
						}
						else {
				        		printf 'infeasible for deadline k = %d\n',i;
						}
					}
					# if we got here, it means that we exceeded the time limit without finding the solution
					 if solve_result = 'limit' or currTlim < 0 then {
						let stoptime := time();
						printf '%4.2f\t',  stoptime -starttime  >> (timelog);
						printf '%2.0f\t', i >> (objlog);
				                printf 'time limit exceeded. best value found (lb): %d\n',i;
				                break;
				        }
				}
			}
		}
	}
}
